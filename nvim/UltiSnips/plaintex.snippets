# This file is being used to store snippets to be shared between ConTeXt and
# LaTeX documents. This means the code in the following snippets is not
# expected to compile in Plain TeX documents.

# The code for the "math" context was taken from:
#		https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets
# Check out the guy's blog for more awesome (La)TeX note-taking tips:
#   https://castel.dev/

# Math context {{{

global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    try:
        first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
        return first != ignore
    except StopIteration:
        return False
endglobal

# }}}

# Math snippets {{{

snippet md "Inline math" A
$$1$
endsnippet

context "math()"
snippet "(( |$)+)fr" "frac" riA
`!p snip.rv=match.group(1)`\frac{$1}{$2}
endsnippet

context "math()"
snippet "( +)sum" "sum" riA
`!p snip.rv=match.group(1)`\sum_{$1}^{$2}
endsnippet

context "math()"
snippet "( +)int" "int" riA
`!p snip.rv=match.group(1)`\int_{$1}^{$2}
endsnippet

context "math()"
snippet "( +)lim" "lim" riA
`!p snip.rv=match.group(1)`\lim_{$1}
endsnippet

context "math()"
snippet .. "dots" A
\dots
endsnippet

context "math()"
snippet oo "infty" iA
\infty
endsnippet

context "math()"
snippet prt "partial" iA
\partial
endsnippet

context "math()"
snippet "([A-Za-z])(\d)" "Auto subscript" riA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet "([A-Za-z])bar" "Postfix bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([A-Za-z])hat" "Postfix hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([A-Za-z])tilde" "Postfix tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet lrr "left right round brackets" A
\left( ${1:${VISUAL}} \right)
endsnippet

context "math()"
snippet lrs "left right square brackets" A
\left[ ${1:${VISUAL}} \right]
endsnippet

context "math()"
snippet lrc "left right curly brackets" A
\left\\{ ${1:${VISUAL}} \right\\}
endsnippet

# }}}

# vim:fdm=marker
