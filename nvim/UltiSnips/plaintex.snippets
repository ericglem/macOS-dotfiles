# This file is being used to store snippets to be shared between ConTeXt and
# LaTeX documents. This means the code in the following snippets is not
# expected to compile in Plain TeX documents.

# The code for the "math" context was taken from:
#		https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets
# Check out the guy's blog for more awesome (La)TeX note-taking tips:
#   https://castel.dev/

# Math context {{{

global !p
vim.command('redir @a | silent exe "syntax list @texMathZones" | redir END')
texMathZones = [x.strip() for x in vim.eval('@a').split(',')][1:]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    try:
        first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
        return first != ignore
    except StopIteration:
        return False
endglobal

# }}}

# Math snippets {{{

snippet md "Inline math" wA
$$1$`!p
if t[2] and t[2][0] not in [' ', '-', ',', ';', '.', '?', '!']:
    snip.rv = ' '
else:
    snip.rv = ''
`$0
endsnippet

context "math()"
snippet fr "frac" iA
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet sum "sum" iA
\sum_{${1:i} = ${2:1}}^{${3:\infty}} $0
endsnippet

context "math()"
snippet int "int" iA
\int_{${1:-\infty}}^{${2:\infty}} $3 d${4:x}
endsnippet

context "math()"
snippet lim "lim" iA
\lim_{${1:n} \to ${2:\infty}} $0
endsnippet

context "math()"
snippet .. "dots" iA
\dots
endsnippet

context "math()"
snippet oo "infty" iA
\infty
endsnippet

context "math()"
snippet part "partial" iA
\partial $0
endsnippet

context "math()"
snippet sq "squared" iA
^2
endsnippet

context "math()"
snippet cb "cubed" iA
^3
endsnippet

context "math()"
snippet '(?<!\\)(sin|cos|tan|ln|log|exp)' "Math operators" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet '(?<!\\)(ge|le|gg|ll|simeq|times|cdot|pm)' "Math relations" rwA
\\`!p snip.rv = match.group(1)` $0
endsnippet

context "math()"
snippet '(?<!\\)(alpha|beta|gamma|delta|epsilon|eta|theta|lambda|mu)' "Greek alphabet 1st half" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet '(?<!\\)(nu|pi|rho|sigma|tau|phi|chi|psi|omega|zeta)' "Greek alphabet 2nd half" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet "([A-Za-z])(\d)" "Auto subscript" riA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet "([A-Za-z])bar" "Postfix bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([A-Za-z])hat" "Postfix hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([A-Za-z])tilde" "Postfix tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet lrr "left right round brackets" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lrs "left right square brackets" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lrc "left right curly brackets" iA
\left\\{ ${1:${VISUAL}} \right \\} $0
endsnippet

# }}}

snippet '(?<!\\)(emph|textit|textbf)' "Emphatic, italic and bold" riA
\\`!p snip.rv = match.group(1)`{$1}`!p
if t[2] and t[2][0] not in [' ', '-', ',', ';', '.', '?', '!']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# vim: foldmethod=marker
