extends plaintex

snippet table "Table environment" bA
\begin{table}[${1:!htbp}]
  % if loading 'float' package use option H to enforce placement at this point
  \centering
  \begin{tabular}{${2:c}}
    $3 \\\\
  \end{tabular}
  \label{tab:$4}
  \caption{$5}
\end{table}
$0
endsnippet

snippet fig "Figure environment" bA
\begin{figure}[${1:!htbp}]
  % if loading 'float' package use option H to enforce placement at this point
  \centering
  \includegraphics[width=${2:0.8}\\textwidth]{${3:./figures/}$4.${5:pdf}}
  \label{fig:$6}
  \caption{$7}
\end{figure}
$0
endsnippet

snippet item "Itemize environment" bA
\begin{itemize}
  \item $1
\end{itemize}
$0
endsnippet

snippet enum "Enumerate environment" bA
\begin{enumerate}
  \item $1
\end{enumerate}
$0
endsnippet

snippet thm "Theorem environment" bA
\begin{thm}$1
  $2
\end{thm}
$0
endsnippet

snippet defn "Definition environment" bA
\begin{defn}$1
  $2
\end{defn}
$0
endsnippet

snippet me "Unnumbered equation" bA
\[
  $1
\]
$0
endsnippet

snippet mne "Numbered equation" bA
\begin{equation}
  $1
\end{equation}
$0
endsnippet

snippet alig "Unnumbered aligned equations" bA
\begin{align*}
  $1 &= $2 \\\\
  &= $3
\end{align*}
$0
endsnippet

# helpers

# global !p
# def delline_exititemize(snip):
#     cursorline = snip.cursor[0]
#     del snip.buffer[cursorline]

#     # add blank line after \end{itemize}
#     snip.buffer.append("\n", cursorline + 1 + 1)
#     # cursorline+1 is the linenr (1-based)

#     # place cursor on blank line after \end{itemize}
#     snip.cursor.set(cursorline+1, 0)

# def in_itemize(snip):
#     # find using searchpairpos('\begin{itemize}','','\end{itemize}','bnWz')
#     beginpos = vim.eval("searchpairpos('\\\\begin{itemize}','','\\\\end{itemize}','bnWz')")
#     endpos   = vim.eval("searchpairpos('\\\\begin{itemize}','','\\\\end{itemize}', 'nWz')")
#     curpos   = snip.cursor.to_vim_cursor()
#     if beginpos == ['0','0'] or endpos == ['0','0']: return False
#     if posCompare(beginpos, curpos) < 0 and posCompare(curpos, endpos) < 0:
#         return True
#     else:
#         return False

# def posCompare(cur1, cur2):
#     """ returns -1 if cur1 is before cur2, +1 if after, and 0 if cur1==cur2
#         cur1, cur2 are required to be lists of the form [row,col]
#     """
#     cur1r = int(cur1[0])
#     cur1c = int(cur1[1])
#     cur2r = int(cur2[0])
#     cur2c = int(cur2[1])
#     if   cur1r < cur2r: return -1
#     elif cur1r > cur2r: return  1
#     else:
#         if   cur1c < cur2c: return -1
#         elif cur1c > cur2c: return  1
#         else: return 0
# endglobal

# # snippets

# context "not in_itemize(snip)"
# snippet item "start list of items" bA
# \begin{itemize}
#   \item $1
# \end{itemize}
# endsnippet

# context "in_itemize(snip)"
# snippet "(^\s*)\\item\s*\S+.*$" "create next item" r
# `!p snip.rv=match.group(0)`
# `!p snip.rv=match.group(1)`\item $0
# endsnippet

# context "in_itemize(snip)"
# post_jump "delline_exititemize(snip)"
# snippet "^\s*\\item\s*" "exit itemize" r
# endsnippet
